// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model University {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  location      Location       @relation(fields: [locationId], references: [id])
  locationId    Int            @unique
  description   String?
  picture       String?
  superadmin    User           @relation("SuperAdmin", fields: [superadminId], references: [id])
  superadminId  Int            @unique
  students      User[]         @relation("Member")
  numStudents   Int            @default(0)
  rsos          RSO[]
  events        Event[]
  notifications Notification[]
}

model User {
  id           Int            @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String         @unique
  password     String
  role         Role           @default(USER)
  superadmin   University?    @relation("SuperAdmin")
  university   University?    @relation("Member", fields: [universityId], references: [id])
  universityId Int?
  rsos         RSO[]          @relation("Member")
  admin        RSO[]          @relation("Admin")
  events       Event[]        @relation("Attendee")
  hostEvents   Event[]        @relation("Host")
  comments     Comment[]      @relation("Commenter")
  adminNotif   Notification[] @relation("RSOAdmin")
}

enum Role {
  SERVERADMIN
  SUPERADMIN
  ADMIN
  USER
}

model RSO {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  admin        User          @relation("Admin", fields: [adminId], references: [id])
  adminId      Int
  members      User[]        @relation("Member")
  status       RsoStatus     @default(PENDING)
  university   University    @relation(fields: [universityId], references: [id])
  universityId Int
  events       Event[]
  createRso    Notification? @relation("CreateRSO")
}

enum RsoStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model Event {
  id           Int           @id @default(autoincrement())
  name         String
  category     String
  description  String?
  startTime    DateTime
  endTime      DateTime
  location     Location      @relation(fields: [locationId], references: [id])
  locationId   Int
  contactPhone String?
  contactEmail String?
  university   University    @relation(fields: [universityId], references: [id])
  universityId Int
  type         EventType     @default(RSO)
  rso          RSO?          @relation(fields: [rsoId], references: [id])
  rsoId        Int?
  attendees    User[]        @relation("Attendee")
  host         User          @relation("Host", fields: [hostId], references: [id])
  hostId       Int
  comments     Comment[]
  publicNotif  Notification? @relation("PubNotif")

  @@unique(fields: [startTime, locationId], name: "time_and_location")
}

model Location {
  id         Int         @id @default(autoincrement())
  name       String?
  latitude   Float
  longitude  Float
  event      Event[]
  university University?

  @@unique(fields: [longitude, latitude], name: "coordinates")
}

enum EventType {
  PUBLIC
  PRIVATE
  RSO
  PENDING
}

model Comment {
  id       Int    @id @default(autoincrement())
  text     String
  author   User   @relation("Commenter", fields: [authorId], references: [id])
  authorId Int
  eventId  Int
  event    Event  @relation(fields: [eventId], references: [id])
  rating   Int
}

model Notification {
  id           Int        @id @default(autoincrement())
  type         NotifType  @default(RSO)
  university   University @relation(fields: [universityId], references: [id])
  universityId Int
  rso          RSO?       @relation("CreateRSO", fields: [rsoId], references: [id])
  rsoId        Int?       @unique
  admin        User       @relation("RSOAdmin", fields: [adminId], references: [id])
  adminId      Int
  event        Event?     @relation("PubNotif", fields: [eventId], references: [id])
  eventId      Int?       @unique
}

enum NotifType {
  RSO
  EVENT
}
